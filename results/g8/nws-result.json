{
  "answers": [
    {
      "number": "1.a",
      "question": "Describe the interaction between mail user agent (MUA), mail transfer agent (MTA), and mail delivery agent (MDA) in SMTP.",
      "text": "Simple Mail Transfer Protocol (SMTP) is a text-based protocol which internally uses the TCP connection to reliably send mails. It is a client-server architecture type protocol which is used to send and receive emails.\n\nComponents of SMTP:\n(i) User Agent (UA) / Mail User Agent (MUA): MUA is a software that is responsible for handling the creation and reading of an email. There are many MUA available like Gmail, Outlook, Yahoo, etc.\n(ii) Mail Transfer Agent (MTA): MTA is a mail server that is responsible for receiving the mail from the User Agent and also hosts the Mail Access Agent. It is the main component in the SMTP mail flow.\n(iii) Mail Delivery Agent (MDA): Mail Delivery Agent, also known as Mail Access Agent (MAA), is responsible for relaying the message (mail) to the destination - to put that into the inbox of the receiver.\n\nInteraction between MUA, MTA and MDA:\n[Diagram showing MUA (Sender) -> MTA -> MDA -> MUA (Receiver)]\n\nSteps:\nStep 1: Sender creates and sends the email (using MUA like Gmail, Outlook, etc. via the SMTP Server).\nStep 2: The Mail Transfer Agent (MTA) sends the email to the Mail Delivery Agent (MDA).\nStep 3: The Mail Delivery Agent (MDA) will put the email in the receiver's inbox.\n\nSecurity Issues in SMTP:\nMain SMTP protocol has many security issues, so it is encrypted and authenticated MUA to check its authenticity. Common security issues with SMTP: Phishing Attack, Spam email, Mail Bombing Attack, Malware distribution (Trojan horses, etc.).",
      "marks": 7,
      "remark": "Comprehensive and accurate description of SMTP components, their interaction, and relevant security issues."
    },
    {
      "number": "1.b",
      "question": "Design a security enhancement to DNS to mitigate cache poisoning attacks and explain how it strengthens the resolution process.",
      "text": "Domain Name System (DNS) is a distributed database system that converts human-readable domain names (like google.com) to corresponding IP addresses (like 192.168.1.1). It's like an internet phonebook.\n\nDNS Components: DNS Resolver, DNS Server, Root Server.\n\nSecurity Issues (Unprotected DNS Server): Many security vulnerabilities like DNS Cache hijacking/poisoning, DNS Session hijacking, DNS ID spoofing, Tunneling. To prevent these security issues, DNS is enhanced with DNSSEC and NSEC3.\n\nMitigating Security Risks to DNS (Cache Poisoning):\nThe most common risk to DNS is cache poisoning, where an attacker modifies the cache in the DNS resolver. The attacker can send false/malformed DNS responses to the resolver, which is compromised by embedding false IP addresses. This can lead to security issues like spreading malicious websites, spreading malware in computers.\n\nDomain Name System Security Extensions (DNSSEC):\nDNSSEC is a security extension added to DNS servers which adds security keys to the response. The DNS resolver validates the security key to check integrity and authenticity of the DNS response. The data to the response is hashed and encrypted using public keys. When the DNS resolver tries to get a DNS response from the server for a domain, it will check the public security key of the response. This process also prevents the DNS cache poisoning attack.\n\nNSEC3 (Next Secure 3):\nAdditionally, DNS is also used with NSEC3, which helps to prevent the Zone Enumeration Attack and Zone Expiration. Zone enumeration is a process/technique for gathering information about domains and their full subdomains. In the context of DNS, it's typically used to verify valid domain addresses. The NSEC3 prevents this by implementing a hashed authenticated zone data list. NSEC3 is an extension to DNSSEC. It checks the authenticity of the response. If it is suspicious, then NSEC3 will send a \"Not Found\" response, which makes it time-taking and costly for attackers to get valid domain addresses.",
      "marks": 7,
      "remark": "Excellent explanation of DNSSEC and NSEC3 as security enhancements, clearly describing how they mitigate cache poisoning and strengthen the resolution process."
    },
    {
      "number": "2.a",
      "question": "Explain the methods and challenges of detecting network intrusions in real time. What are the key components of a real-time intrusion detection system?",
      "text": "Network Intrusion: Network Intrusion is an illegal or unauthorized activity caused by an attacker exploiting the network. Network intrusion may cause or lead to data theft, financial loss, reputation loss, stolen network activity, malware installation, user and owner privacy losses, etc.\n\nDetection (of Intrusion):\nNetwork intrusion detection is a method for detecting the intrusion in the network, alerting the admin, and fixing the issues. There are many methods to detect these intrusions: Intrusion Detection Systems (IDS), Network Monitoring (regular or automated monitoring of network, especially network activity, traffic flow, etc. using tools like Wireshark), Firewalls (to filter network traffic), Logging and Reading (checking logs to detect unusual patterns).\nGenerally, we monitor network activities and find suspicious patterns in activity, then detect and alert the admin.\n\nChallenges in Intrusion Detection:\nMaintaining an effective intrusion detection system is complex and expensive. Difficulty detecting minor traffic changes due to network instability. False Positives: Sometimes, IDS detects normal traffic as an intrusion, which can lead to server overload and resource exhaustion.\n\nKey Components of Real-time Intrusion Detection System (IDS):\n1. Monitoring System: Checks the network traffic for suspicious activities and alerts.\n2. Logging System: Records each and every activity in log files. It helps to verify the intrusion.\n3. Traffic Analyzer: Looks for suspicious activity or malicious traffic and finds the pattern of intrusions.\n4. Alert System: Notifies administrators about network intrusions.",
      "marks": 7,
      "remark": "Well-structured answer covering methods, challenges, and key components of real-time intrusion detection systems. All points are relevant and explained clearly."
    },
    {
      "number": "2.b",
      "question": "Perform a detailed port scan using Nmap on a test virtual machine. Analyze the scan report and identify potential security risks.",
      "text": "Port Scanning: Port scanning is a type of security attack to find any open ports that are receiving data. Attackers use these ports to gain information or manipulate data in those ports by running malicious scripts.\n\nTypes of Port Scanning: (Student's text contains garbled and non-standard types: \"Port Scanning Admin Port Scanning Application port scanning Protocol Port Scanning Application Protocol Port Scanning\")\n\nMitigation: Use network segmentation and close unnecessary ports, or filter traffic affected by port scan attacks.\n\nPerforming a Detailed Port Scan using Nmap:\nNmap: Nmap (Network Mapper) is a software tool that is available for performing port scanning attacks on machines.\n\nPrerequisites:\nSkill and setup Nmap in a Kali Linux machine. Acquire a vulnerable virtual machine and run it on a local machine or a cloud-based virtual machine. Provide the IP address of the vulnerable machine to Nmap.\n\nSteps:\nNmap will perform the port scan attack on the provided IP address and log all results for the virtual machine. It will detect the open ports that are either sending data or receiving data to an open port.\n\nPotential Security Risks due to Open Ports: Unsecure APIs & ports, data theft, network and device intrusion, malware installation, network and activity monitoring.",
      "marks": 5,
      "remark": "Good explanation of port scanning, Nmap usage, and potential risks. However, the 'Types of Port Scanning' section is unclear and lists non-standard classifications, indicating a lack of understanding in that specific area. The 'analyze the scan report' part is implicitly covered by listing detected open ports and their risks."
    },
    {
      "number": "4.a",
      "question": "Elucidate how spyware and keyloggers compromise user privacy and system security?",
      "text": "Spyware: Spyware is a type of malware (malicious software) that is used to monitor computer activities, habits, preferences, and act with the consent of the device / computer owner.\n\nKeyloggers: Keylogger is a type of spyware that is used to track the user's activity on the computer. It records keyboard activity, mouse track, and other activity on peripheral devices like scanners, USBs, etc. It then sends this data to the attacker over the internet.\n\nPrivacy Concerns with Spyware and Keyloggers:\nSpyware and keyloggers pose a security and privacy threat to both individuals and organizations. They steal important data like passwords, bank information, financial files, and confidential information. They steal information about individuals or organizations.\n\nImportant Privacy Threats:\nUnauthorized access (imaging and microphone), stealing data from organizations, stealing important documents from a computer, reading passwords, user's financial losses, loss of bank credentials, personal privacy loss, loss of confidential information, identity theft, etc. These are primary concerns affected by spyware and keyloggers.\n\nHow to prevent an attack (Spyware or Keylogger):\nFollow security patches and updates regularly. Activate antivirus. Configure a strong monitoring system. Track activity and perform full malware removal/detection (detect malicious or unauthorized illegitimate attacks).",
      "marks": 7,
      "remark": "Comprehensive explanation of how spyware and keyloggers compromise privacy and security, providing clear definitions, specific threats, and effective prevention methods."
    },
    {
      "number": "4.b",
      "question": "Consider a vulnerable C program with a buffer overflow. Describe how an attacker could exploit it to gain shell access. Suggest code-level defenses that can be applied.",
      "text": "Buffer Overflow: Buffer overflow is a code hijacking method for gaining unauthorized access to a system or network. It usually works by filling up memory (stack/heap).\n[Diagram showing RAM Overflow -> RAM Buffer -> Return Stack Pointer]\n\nExploitation (Gaining Shell Access):\nThe attacker achieves this by sending a large payload into the program. When the buffer overflows into RAM, the attacker injects scripts to gain access to the system. There are two types of Buffer Overflow: (i) Stack Buffer Overflow, (ii) Heap Buffer Overflow.\nConsidering a vulnerable C program, an attacker would send an unauthorized shell access request.\n\nProgramming mistakes that cause buffer overflow: Using built-in unsafe methods like `gets()` or `strcpy()`. Pointers are vulnerable to buffer overflow attacks.\n\nAttack Process: The attacker inputs a false-sized payload into the program's input buffers, which are reading the input. When it overflows due to the false size, the data will be going into the return address memory. When the code is executed from the RAM system, the attacker can store shell commands in the commands for the custom access memory. The shell code is executed by the operating system directly or through a connection (such as Telnet, CLI - Command Line Interface). Through the shell, the attacker can read files, manipulate data, and perform all possible activities illegally on the target computer.\n\nCode-level Defenses:\nSimple code defenses that can be applied practically to prevent buffer overflow attacks:\nDon't use unsafe C/C++ methods (like `gets()`, `strcpy()`). Use methods like `scanf_s()` (or `fgets()`, `strncpy()`) etc., which provides input size checking to avoid malicious input.",
      "marks": 7,
      "remark": "Thorough description of buffer overflow, its exploitation for shell access in a C program, common programming mistakes, and effective code-level defenses. All aspects of the question are addressed correctly."
    },
    {
      "number": "6.a",
      "question": "Does HTTPS protect against client-side vulnerabilities like XSS or CSRF? Justify.",
      "text": "HTTPS: HTTPS (Hypertext Transfer Protocol Secure) is a secure mode or extension for the HTTP protocol. It is primarily used in web communication. Through HTTP, the data (text, images, and other file types) transferred between the client and the server is raw. HTTPS provides an expressive SSL/TLS secure handshake and certificate to the web application, making it more secure compared to HTTP.\n\nDoes HTTPS protect against XSS/CSRF? No. HTTPS alone doesn't protect the client-server against XSS (Cross-Site Scripting) or CSRF (Cross-Site Request Forgery) attacks. The server and frontend need to be secured in a way that can withstand XSS and CSRF attacks.\n\nCross-Site Scripting (XSS):\nXSS is a type of security attack in web where it allows the attacker to inject malicious code into the website. It could be persistent (stored XSS), reflected (non-persistent XSS), or DOM-based XSS. Simply HTML injection attacks can occur through the website. XSS evaluation involves many rows of threat.\nHow it works: Attacker inputs JavaScript/HTML code that is checked but triggered inside the main webpage. Malicious data can be stolen. XSS injection attacks are used to input malicious values into the backend and perform specific behavior on the application.\n\nCross-Site Request Forgery (CSRF):\nA CSRF attack checks/triggers/forges the HTTP request to the server or manipulates it by changing the parameter values (header, cookies, etc.). Finally, it steals data or performs unauthorized activities on the website. Tools used: Postman, ZAP, Dev-Tools, etc.\n\nHTTPS and XSS/CSRF (Summary):\nHTTPS will encrypt the data packets, which can protect from man-in-the-middle attacks. But XSS and CSRF cannot be detected and prevented by HTTPS alone because both involve sending forged requests to the server or client.",
      "marks": 7,
      "remark": "Clear and correct answer. The student accurately states that HTTPS alone does not protect against XSS or CSRF, providing good justifications and definitions of the attacks."
    },
    {
      "number": "6.b",
      "question": "Simulate a scenario where violating SOP could allow a malicious page to access sensitive user data.",
      "text": "Same-Origin Policy (SOP): The Same-Origin Policy (SOP) is a browser security protocol used by websites to prevent modified cross-site communication. CORS (Cross-Origin Resource Sharing) is another protocol that allows JSON requests and server packets.\n\nCORS and SOP: Using CORS, cross-site communication could help APIs and AJAX requests. If configured properly, this helps prevent malicious attacks.\n\nScenario: Violating SOP and Sensitive Data Access:\nAttack Description: Imagine SOP allowing malicious code to access sensitive data. To simulate this scenario: an attacker creates a malicious page (e.g., `attacker.com`) that contains JavaScript. This malicious page loads an `<iframe>` with a legitimate banking website (e.g., `bank.com`) where the user is logged in.\nSOP Violation: If SOP is violated, the JavaScript on `attacker.com` could try to access content within the `<iframe>` (i.e., `bank.com`). For example, it could read form data, session cookies, or other sensitive information directly from the banking site, even though it's a different origin.\nConsequences: The attacker could then send this stolen sensitive user data (e.g., financial information, login credentials, personal info) to their own server.\nDeveloper Oversight: Developers might allow `Access-Control-Allow-Origin: *` in CORS headers for `bank.com`, unintentionally enabling cross-origin requests from any domain, thereby weakening SOP protection.\nThe attacker could also use HTTP requests to gather all types of information.\nImpact: This violation of SOP still affects data loss, financial loss, account/email compromise. An attacker could redirect to malicious payment gateways, causing financial losses, user privacy issues, etc.\n\nConclusion: So, to conclude, SOP (or X-site communication) must be properly implemented and configured.",
      "marks": 5,
      "remark": "The core scenario of a malicious page accessing data from a legitimate site via an iframe due to SOP violation is explained well. However, the mention of Nmap (which was removed in the cleaning but was in the raw text) and the general reference to HTTP requests without specifics, detract from the clarity of the client-side SOP bypass. Some parts are less relevant to the direct violation of SOP itself, focusing more on misconfiguration of CORS."
    },
    {
      "number": "7.a",
      "question": "What is HTTP parameter pollution (HPP)? Describe how multiple parameters with the same name are handled.",
      "text": "HTTP Parameter Pollution (HPP): HTTP parameter pollution is a web-based attack caused by third-party attackers to gain unauthorized access by searching/manipulating parameters on the server. This is caused by web searching for duplicate parameters, and large payloads into the parameters that are not handled properly by the server. It could expose normal activity or cause unauthorized access.\n\nHPP Attack: In an HPP attack, an attacker will send multiple parameters with the same name. This causes the server to confuse its parameters, which could result in a crash or unexpected behavior of the server.\n\nPreventing HPP:\nSanitize the parameters before processing (like defensive coding). Handle multiple parameters properly. Protect from Cross-Site Scripting (XSS). Detect CSRF (Cross-Site Request Forgery) and block the request. Implement anti-DDoS (Denial of Service) protection by blocking IP addresses. Proper traffic inspection before serving (type validation and parameter validation). Detect malicious or suspicious requests. Use WAF (Web Application Firewall) to filter dangerous/malicious requests.",
      "marks": 4,
      "remark": "The definition of HPP and its prevention methods are good. However, the question specifically asks 'Describe how multiple parameters with the same name are handled,' which the student does not fully address. They describe the *effect* of such parameters (server confusion, crash, unexpected behavior) rather than describing the *mechanisms* by which different server-side technologies process them (e.g., taking the first, last, or concatenating values)."
    },
    {
      "number": "7.b",
      "question": "A shopping cart application allows users to update item quantities. An attacker modifies a request to set a negative quantity for an item. Describe how this could be exploited as a logic flaw and propose a solution to prevent it.",
      "text": "Logic Flaw (Shopping Cart Quantity Update): A shopping cart application allows users to update item quantity. An attacker might modify the request to set a negative quantity for an item. If over-scanned, this could lead to empty inventory, refunds, and financial losses.\n\nExploitation of the Issue:\nThe attacker will send a payload which could reduce quantity.\nExample Payload (reconstructed from OCR):\nPOST /updatecart HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: ...\nitem_id=GS6A5Xx48&quantity=-5\n\nThis payload is asking the server to update the item \"GS6A5Xx48\" to the value of -5.\nUsing this example, an attacker will gain control, manipulate the cart inventory (e.g., set `quantity=-5`, `price=0`, `total=0`). If the original quantity was 10, and the attacker sets it to -5, the system might calculate `10 - (-5) = 15` or even `10 + (-5) = 5`. More critically, if the system processes refunds for negative quantities, `5 * 33500` (original price) could become `-5 * 33500`, resulting in the customer *receiving* money or the inventory becoming negative.\nExample: If an item costs 33500 Rs, and the attacker sets the quantity to -5, the final cart value might become -33500 (meaning the attacker gets paid). When this attack takes place, the company's system will put the affected values in memory.\n\nSolution:\nThe simple solution is to implement logic checks:\nValidate the quantity (e.g., `if quantity < 0 or quantity == 0, then delete/reject`). If `quantity_parameter <= 0` then reject. Else if `quantity_update (positive)` (perform update). This simple code defense protects against the above example.",
      "marks": 7,
      "remark": "Excellent description of the logic flaw, clear explanation of how it could be exploited (including a reconstructed payload and financial impact), and a precise code-level solution. All aspects of the question are addressed effectively."
    }
  ]
}